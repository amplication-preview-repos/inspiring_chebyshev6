/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExistingClinics } from "./ExistingClinics";
import { ExistingClinicsCountArgs } from "./ExistingClinicsCountArgs";
import { ExistingClinicsFindManyArgs } from "./ExistingClinicsFindManyArgs";
import { ExistingClinicsFindUniqueArgs } from "./ExistingClinicsFindUniqueArgs";
import { CreateExistingClinicsArgs } from "./CreateExistingClinicsArgs";
import { UpdateExistingClinicsArgs } from "./UpdateExistingClinicsArgs";
import { DeleteExistingClinicsArgs } from "./DeleteExistingClinicsArgs";
import { ExistingClinicsService } from "../existingClinics.service";
@graphql.Resolver(() => ExistingClinics)
export class ExistingClinicsResolverBase {
  constructor(protected readonly service: ExistingClinicsService) {}

  async _existingClinicsItemsMeta(
    @graphql.Args() args: ExistingClinicsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExistingClinics])
  async existingClinicsItems(
    @graphql.Args() args: ExistingClinicsFindManyArgs
  ): Promise<ExistingClinics[]> {
    return this.service.existingClinicsItems(args);
  }

  @graphql.Query(() => ExistingClinics, { nullable: true })
  async existingClinics(
    @graphql.Args() args: ExistingClinicsFindUniqueArgs
  ): Promise<ExistingClinics | null> {
    const result = await this.service.existingClinics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExistingClinics)
  async createExistingClinics(
    @graphql.Args() args: CreateExistingClinicsArgs
  ): Promise<ExistingClinics> {
    return await this.service.createExistingClinics({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ExistingClinics)
  async updateExistingClinics(
    @graphql.Args() args: UpdateExistingClinicsArgs
  ): Promise<ExistingClinics | null> {
    try {
      return await this.service.updateExistingClinics({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExistingClinics)
  async deleteExistingClinics(
    @graphql.Args() args: DeleteExistingClinicsArgs
  ): Promise<ExistingClinics | null> {
    try {
      return await this.service.deleteExistingClinics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
