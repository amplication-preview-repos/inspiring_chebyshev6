/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ExistingClinics as PrismaExistingClinics,
} from "@prisma/client";

export class ExistingClinicsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExistingClinicsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.existingClinics.count(args);
  }

  async existingClinicsItems(
    args: Prisma.ExistingClinicsFindManyArgs
  ): Promise<PrismaExistingClinics[]> {
    return this.prisma.existingClinics.findMany(args);
  }
  async existingClinics(
    args: Prisma.ExistingClinicsFindUniqueArgs
  ): Promise<PrismaExistingClinics | null> {
    return this.prisma.existingClinics.findUnique(args);
  }
  async createExistingClinics(
    args: Prisma.ExistingClinicsCreateArgs
  ): Promise<PrismaExistingClinics> {
    return this.prisma.existingClinics.create(args);
  }
  async updateExistingClinics(
    args: Prisma.ExistingClinicsUpdateArgs
  ): Promise<PrismaExistingClinics> {
    return this.prisma.existingClinics.update(args);
  }
  async deleteExistingClinics(
    args: Prisma.ExistingClinicsDeleteArgs
  ): Promise<PrismaExistingClinics> {
    return this.prisma.existingClinics.delete(args);
  }
}
