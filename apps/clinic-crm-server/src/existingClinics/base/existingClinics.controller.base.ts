/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExistingClinicsService } from "../existingClinics.service";
import { ExistingClinicsCreateInput } from "./ExistingClinicsCreateInput";
import { ExistingClinics } from "./ExistingClinics";
import { ExistingClinicsFindManyArgs } from "./ExistingClinicsFindManyArgs";
import { ExistingClinicsWhereUniqueInput } from "./ExistingClinicsWhereUniqueInput";
import { ExistingClinicsUpdateInput } from "./ExistingClinicsUpdateInput";

export class ExistingClinicsControllerBase {
  constructor(protected readonly service: ExistingClinicsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExistingClinics })
  async createExistingClinics(
    @common.Body() data: ExistingClinicsCreateInput
  ): Promise<ExistingClinics> {
    return await this.service.createExistingClinics({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clinicAddress: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExistingClinics] })
  @ApiNestedQuery(ExistingClinicsFindManyArgs)
  async existingClinicsItems(
    @common.Req() request: Request
  ): Promise<ExistingClinics[]> {
    const args = plainToClass(ExistingClinicsFindManyArgs, request.query);
    return this.service.existingClinicsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clinicAddress: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExistingClinics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async existingClinics(
    @common.Param() params: ExistingClinicsWhereUniqueInput
  ): Promise<ExistingClinics | null> {
    const result = await this.service.existingClinics({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clinicAddress: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExistingClinics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExistingClinics(
    @common.Param() params: ExistingClinicsWhereUniqueInput,
    @common.Body() data: ExistingClinicsUpdateInput
  ): Promise<ExistingClinics | null> {
    try {
      return await this.service.updateExistingClinics({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          clinicAddress: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExistingClinics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExistingClinics(
    @common.Param() params: ExistingClinicsWhereUniqueInput
  ): Promise<ExistingClinics | null> {
    try {
      return await this.service.deleteExistingClinics({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          clinicAddress: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
