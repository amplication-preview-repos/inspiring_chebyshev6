/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DrawingsService } from "../drawings.service";
import { DrawingsCreateInput } from "./DrawingsCreateInput";
import { Drawings } from "./Drawings";
import { DrawingsFindManyArgs } from "./DrawingsFindManyArgs";
import { DrawingsWhereUniqueInput } from "./DrawingsWhereUniqueInput";
import { DrawingsUpdateInput } from "./DrawingsUpdateInput";

export class DrawingsControllerBase {
  constructor(protected readonly service: DrawingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Drawings })
  async createDrawings(
    @common.Body() data: DrawingsCreateInput
  ): Promise<Drawings> {
    return await this.service.createDrawings({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        drawing: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Drawings] })
  @ApiNestedQuery(DrawingsFindManyArgs)
  async drawingsItems(@common.Req() request: Request): Promise<Drawings[]> {
    const args = plainToClass(DrawingsFindManyArgs, request.query);
    return this.service.drawingsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        drawing: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Drawings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async drawings(
    @common.Param() params: DrawingsWhereUniqueInput
  ): Promise<Drawings | null> {
    const result = await this.service.drawings({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        drawing: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Drawings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDrawings(
    @common.Param() params: DrawingsWhereUniqueInput,
    @common.Body() data: DrawingsUpdateInput
  ): Promise<Drawings | null> {
    try {
      return await this.service.updateDrawings({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          drawing: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Drawings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDrawings(
    @common.Param() params: DrawingsWhereUniqueInput
  ): Promise<Drawings | null> {
    try {
      return await this.service.deleteDrawings({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          drawing: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
