/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Drawings as PrismaDrawings } from "@prisma/client";

export class DrawingsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DrawingsCountArgs, "select">): Promise<number> {
    return this.prisma.drawings.count(args);
  }

  async drawingsItems(
    args: Prisma.DrawingsFindManyArgs
  ): Promise<PrismaDrawings[]> {
    return this.prisma.drawings.findMany(args);
  }
  async drawings(
    args: Prisma.DrawingsFindUniqueArgs
  ): Promise<PrismaDrawings | null> {
    return this.prisma.drawings.findUnique(args);
  }
  async createDrawings(
    args: Prisma.DrawingsCreateArgs
  ): Promise<PrismaDrawings> {
    return this.prisma.drawings.create(args);
  }
  async updateDrawings(
    args: Prisma.DrawingsUpdateArgs
  ): Promise<PrismaDrawings> {
    return this.prisma.drawings.update(args);
  }
  async deleteDrawings(
    args: Prisma.DrawingsDeleteArgs
  ): Promise<PrismaDrawings> {
    return this.prisma.drawings.delete(args);
  }
}
