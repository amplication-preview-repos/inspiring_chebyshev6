/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactsService } from "../contacts.service";
import { ContactsCreateInput } from "./ContactsCreateInput";
import { Contacts } from "./Contacts";
import { ContactsFindManyArgs } from "./ContactsFindManyArgs";
import { ContactsWhereUniqueInput } from "./ContactsWhereUniqueInput";
import { ContactsUpdateInput } from "./ContactsUpdateInput";

export class ContactsControllerBase {
  constructor(protected readonly service: ContactsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Contacts })
  async createContacts(
    @common.Body() data: ContactsCreateInput
  ): Promise<Contacts> {
    return await this.service.createContacts({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Contacts] })
  @ApiNestedQuery(ContactsFindManyArgs)
  async contactsItems(@common.Req() request: Request): Promise<Contacts[]> {
    const args = plainToClass(ContactsFindManyArgs, request.query);
    return this.service.contactsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Contacts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contacts(
    @common.Param() params: ContactsWhereUniqueInput
  ): Promise<Contacts | null> {
    const result = await this.service.contacts({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Contacts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContacts(
    @common.Param() params: ContactsWhereUniqueInput,
    @common.Body() data: ContactsUpdateInput
  ): Promise<Contacts | null> {
    try {
      return await this.service.updateContacts({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Contacts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContacts(
    @common.Param() params: ContactsWhereUniqueInput
  ): Promise<Contacts | null> {
    try {
      return await this.service.deleteContacts({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
