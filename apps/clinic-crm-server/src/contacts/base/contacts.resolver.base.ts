/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Contacts } from "./Contacts";
import { ContactsCountArgs } from "./ContactsCountArgs";
import { ContactsFindManyArgs } from "./ContactsFindManyArgs";
import { ContactsFindUniqueArgs } from "./ContactsFindUniqueArgs";
import { CreateContactsArgs } from "./CreateContactsArgs";
import { UpdateContactsArgs } from "./UpdateContactsArgs";
import { DeleteContactsArgs } from "./DeleteContactsArgs";
import { User } from "../../user/base/User";
import { ContactsService } from "../contacts.service";
@graphql.Resolver(() => Contacts)
export class ContactsResolverBase {
  constructor(protected readonly service: ContactsService) {}

  async _contactsItemsMeta(
    @graphql.Args() args: ContactsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Contacts])
  async contactsItems(
    @graphql.Args() args: ContactsFindManyArgs
  ): Promise<Contacts[]> {
    return this.service.contactsItems(args);
  }

  @graphql.Query(() => Contacts, { nullable: true })
  async contacts(
    @graphql.Args() args: ContactsFindUniqueArgs
  ): Promise<Contacts | null> {
    const result = await this.service.contacts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Contacts)
  async createContacts(
    @graphql.Args() args: CreateContactsArgs
  ): Promise<Contacts> {
    return await this.service.createContacts({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Contacts)
  async updateContacts(
    @graphql.Args() args: UpdateContactsArgs
  ): Promise<Contacts | null> {
    try {
      return await this.service.updateContacts({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Contacts)
  async deleteContacts(
    @graphql.Args() args: DeleteContactsArgs
  ): Promise<Contacts | null> {
    try {
      return await this.service.deleteContacts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Contacts): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
