/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClinicProjects } from "./ClinicProjects";
import { ClinicProjectsCountArgs } from "./ClinicProjectsCountArgs";
import { ClinicProjectsFindManyArgs } from "./ClinicProjectsFindManyArgs";
import { ClinicProjectsFindUniqueArgs } from "./ClinicProjectsFindUniqueArgs";
import { CreateClinicProjectsArgs } from "./CreateClinicProjectsArgs";
import { UpdateClinicProjectsArgs } from "./UpdateClinicProjectsArgs";
import { DeleteClinicProjectsArgs } from "./DeleteClinicProjectsArgs";
import { ClinicProjectsService } from "../clinicProjects.service";
@graphql.Resolver(() => ClinicProjects)
export class ClinicProjectsResolverBase {
  constructor(protected readonly service: ClinicProjectsService) {}

  async _clinicProjectsItemsMeta(
    @graphql.Args() args: ClinicProjectsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClinicProjects])
  async clinicProjectsItems(
    @graphql.Args() args: ClinicProjectsFindManyArgs
  ): Promise<ClinicProjects[]> {
    return this.service.clinicProjectsItems(args);
  }

  @graphql.Query(() => ClinicProjects, { nullable: true })
  async clinicProjects(
    @graphql.Args() args: ClinicProjectsFindUniqueArgs
  ): Promise<ClinicProjects | null> {
    const result = await this.service.clinicProjects(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClinicProjects)
  async createClinicProjects(
    @graphql.Args() args: CreateClinicProjectsArgs
  ): Promise<ClinicProjects> {
    return await this.service.createClinicProjects({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClinicProjects)
  async updateClinicProjects(
    @graphql.Args() args: UpdateClinicProjectsArgs
  ): Promise<ClinicProjects | null> {
    try {
      return await this.service.updateClinicProjects({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClinicProjects)
  async deleteClinicProjects(
    @graphql.Args() args: DeleteClinicProjectsArgs
  ): Promise<ClinicProjects | null> {
    try {
      return await this.service.deleteClinicProjects(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
