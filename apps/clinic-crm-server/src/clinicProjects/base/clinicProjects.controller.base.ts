/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClinicProjectsService } from "../clinicProjects.service";
import { ClinicProjectsCreateInput } from "./ClinicProjectsCreateInput";
import { ClinicProjects } from "./ClinicProjects";
import { ClinicProjectsFindManyArgs } from "./ClinicProjectsFindManyArgs";
import { ClinicProjectsWhereUniqueInput } from "./ClinicProjectsWhereUniqueInput";
import { ClinicProjectsUpdateInput } from "./ClinicProjectsUpdateInput";

export class ClinicProjectsControllerBase {
  constructor(protected readonly service: ClinicProjectsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClinicProjects })
  async createClinicProjects(
    @common.Body() data: ClinicProjectsCreateInput
  ): Promise<ClinicProjects> {
    return await this.service.createClinicProjects({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clinicName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClinicProjects] })
  @ApiNestedQuery(ClinicProjectsFindManyArgs)
  async clinicProjectsItems(
    @common.Req() request: Request
  ): Promise<ClinicProjects[]> {
    const args = plainToClass(ClinicProjectsFindManyArgs, request.query);
    return this.service.clinicProjectsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clinicName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClinicProjects })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clinicProjects(
    @common.Param() params: ClinicProjectsWhereUniqueInput
  ): Promise<ClinicProjects | null> {
    const result = await this.service.clinicProjects({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clinicName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClinicProjects })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClinicProjects(
    @common.Param() params: ClinicProjectsWhereUniqueInput,
    @common.Body() data: ClinicProjectsUpdateInput
  ): Promise<ClinicProjects | null> {
    try {
      return await this.service.updateClinicProjects({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          clinicName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClinicProjects })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClinicProjects(
    @common.Param() params: ClinicProjectsWhereUniqueInput
  ): Promise<ClinicProjects | null> {
    try {
      return await this.service.deleteClinicProjects({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          clinicName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
